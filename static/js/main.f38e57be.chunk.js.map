{"version":3,"sources":["components/info.js","components/form.js","components/weather.js","App.js","reportWebVitals.js","index.js"],"names":["Info","React","Component","Form","className","onSubmit","this","props","weatherMethod","type","name","Weather","city","country","lat","lon","weather","pressure","src","img","temp","message","error","API_KEY","App","state","undefined","wind","gettingWeather","e","a","preventDefault","target","elements","value","fetch","API_URL","json","data","console","log","setState","Math","ceil","main","description","speed","coord","toFixed","sys","icon","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f38e57be.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Info extends React.Component{\r\n  render(){\r\n    return(\r\n    <div>\r\n      <h2>Погодное приложение</h2>\r\n      <p>Узнайте погоду в своем городе!</p>\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Info;","import React from \"react\";\r\n\r\nclass Form extends React.Component{\r\n  render(){\r\n    return (\r\n      <form className=\"weather-form\" onSubmit = {this.props.weatherMethod}>\r\n        <input className=\"weather-input\" type=\"text\" name=\"city\"/>\r\n        <button className=\"weather-button\">Узнать погоду</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form","import React from \"react\";\r\n\r\nclass Weather extends React.Component{\r\n  render(){\r\n    return(\r\n    <div>\r\n      {this.props.city &&\r\n      <div>\r\n      <p>Местоположение : {this.props.city}, {this.props.country}</p>\r\n      <p>Широта : {this.props.lat}, долгота : {this.props.lon}</p>\r\n       <p>Погода : {this.props.weather}</p>\r\n       <p>Давление : {this.props.pressure}</p>   \r\n       <div className=\"weather-temp__wrap\">\r\n       <img src={this.props.img}/>   \r\n       <p>{this.props.temp} °С</p>\r\n       </div>  \r\n     </div>\r\n    } \r\n    <p>{this.props.message}</p>   \r\n<p>{this.props.error}</p>\r\n    </div>\r\n    )\r\n  }\r\n    \r\n}\r\n\r\nexport default Weather","import React from \"react\";\nimport Info from \"./components/info\";\nimport Form from \"./components/form\";\nimport Weather from \"./components/weather\";\n\nconst API_KEY = '4c4edf0a2984921551244f62f35d8c1e';\n\n\nclass App extends React.Component{\n\n  state = {\ntemp:undefined,\ncity:undefined,\nweather:undefined,\nwind:undefined,\nlat:undefined,\nlon:undefined,\ncountry:undefined,\npressure:undefined,\nerror:undefined,\nmessage:undefined\n  }\n\n\n\n  gettingWeather = async(e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n\n    if (city) {\n\n    const API_URL = await fetch('https://api.openweathermap.org/data/2.5/weather?q='+city+'&lang=ru&appid=' + API_KEY +'&units=metric');\n    const data = await API_URL.json()\nconsole.log(data)\nif (data.name){\n    this.setState({\n      temp:Math.ceil(data.main.temp),\n      city:data.name,\n      weather:data.weather[0].description,\n      wind:Math.ceil(data.wind.speed),\n      lat:data.coord.lat.toFixed(2),\n      lon:data.coord.lon.toFixed(2),\n      country:data.sys.country,\n      pressure:data.main.pressure,\n      error:undefined,\n      img:data.weather[0].icon,\n      message:data.message\n    })\n}\n\nelse if (data.message){\n  this.setState({\n    temp:undefined,\n    city:undefined,\n    weather:undefined,\n    wind:undefined,\n    lat:undefined,\n    lon:undefined,\n    country:undefined,\n    pressure:undefined,\n    error:undefined,\n    img:undefined,\n    message:'Город не найден :('\n  })\n}\n          \n  } else {\n    this.setState({\n      temp:undefined,\n      city:undefined,\n      weather:undefined,\n      wind:undefined,\n      lat:undefined,\n      lon:undefined,\n      country:undefined,\n      pressure:undefined,\n      error:'Введите название города',\n      message:undefined\n    })\n  }\n\n  }\n  \n\n\n  render(){\n    return (\n      <div>\n        <Info/>\n        <Form weatherMethod={this.gettingWeather}/>\n        <Weather\n        temp={this.state.temp}\n        city={this.state.city}\n        weather={this.state.weather}\n        wind={this.state.wind}\n        lat={this.state.lat}\n        lon={this.state.lon}\n        country={this.state.country}\n        pressure={this.state.pressure}\n        error={this.state.error}\n        message={this.state.message}\n        img={\"https://openweathermap.org/img/w/\"+this.state.img+\".png\"}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}